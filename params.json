{
  "name": "Walls of Doom",
  "tagline": "That Minimalistic Platformer",
  "body": "Walls of Doom\r\n=============\r\n\r\n# About\r\n\r\nWalls of Doom (WoD) is a minimalistic\r\n[platformer](https://en.wikipedia.org/wiki/Platform_game) written in C by\r\nBernardo Sulzbach and Leonardo Ferrazza.\r\n\r\nSee [the Bitbucket issue tracker](https://bitbucket.org/mafagafogigante/walls-of-doom/issues?status=new&status=open&sort=-priority).\r\n\r\n# Continuous Integration Status\r\n\r\n## Semaphore CI\r\n\r\nThis build server uses Ubuntu 14.04 64-bit, CMake 2.8, and GCC 4.8.4.\r\n\r\nThe [build status](https://semaphoreci.com/mafagafogigante/walls-of-doom) can\r\nbe seen by some developers.\r\n\r\n# Building and Running\r\n\r\nThe following C compilers are known to work perfectly with the project:\r\n\r\n+ GCC 4.8\r\n+ GCC 5.3\r\n+ Clang 3.7\r\n\r\n## Terminal\r\n\r\n```bash\r\n$ mkdir build\r\n$ cd build\r\n$ cmake ..\r\n$ make\r\n```\r\n\r\n### Running the tests\r\n\r\n```bash\r\n$ cd tests\r\n$ ./tests\r\n```\r\n\r\n### Running the game\r\n\r\n```bash\r\n$ cd game\r\n$ ./game\r\n```\r\n\r\n## Code::Blocks\r\n\r\n```bash\r\n$ cmake . -G\"CodeBlocks - Unix Makefiles\"\r\n```\r\n\r\n### Running the tests\r\n\r\n+ Open Code::Blocks\r\n+ Open the Code::Blocks project file on the root directory\r\n+ Select `autotest` as the target\r\n+ Press \"Build and run\"\r\n\r\n### Running the game\r\n\r\n+ Open Code::Blocks\r\n+ Open the Code::Blocks project file on the root directory\r\n+ Select `walls-of-doom` as the target\r\n+ Press \"Build and run\"\r\n\r\n# Generating the Images\r\n\r\n```bash\r\n$ cd blender\r\n$ bash render.sh\r\n```\r\n\r\nAnd they should be written in to the output subdirectory.\r\n\r\n## Links\r\n\r\nAll these images are posted on the [Imgur album of the project](http://imgur.com/a/kiOY2).\r\n\r\n# Implementation Notes\r\n\r\n## IO\r\n\r\nBefore using the IO capabilities of Walls of Doom, `initialize()` must be\r\ncalled. Before quitting the game, `finalize()` must be called to free associated\r\nresources.\r\n\r\nIf one must use the logger without initializing the other IO functions, the\r\nlogger module may be independently initialized by calling `initialize_logger()`\r\nand finalized by calling `finalize_logger()`.\r\n\r\n## Business Logic\r\n\r\n### Menu\r\n\r\nUnder the Menu name is grouped most of the logic that deals with handling user\r\ninteractions outside of the game. This includes menu item selection, the top\r\nscores functionality and the auxiliary functions of these parts of the\r\napplication.\r\n\r\n### Physics\r\n\r\nThe Physics module is where most of the calculations and checks take place.\r\nWalking, falling, jumping, the fetching of perks, and death are some of the\r\nthings that fall under the scope of this module.\r\n\r\n## Sorting\r\n\r\nThis project has its own generic insertion sort implementation.\r\n\r\nIt is a generic function because it uses void pointers and function pointers to\r\ncomparators in order to be reused for different data types without any code\r\nduplication.\r\n\r\n## Pseudorandom Number Generator\r\n\r\nBefore using the PRNG, you can initialize it with the current time by calling\r\n`seed_random()`.\r\n\r\nThis project uses the **[xoroshiro+](http://xoroshiro.di.unimi.it/)** algorithm\r\nto efficiently generate pseudo-random numbers with a big period.\r\n\r\nThe convenience function that returns an integer in the specified range uses\r\nmultiple random numbers modulo the next power of two to prevent the modulo bias\r\nthat comes with more naive approaches.\r\n\r\n# License\r\n\r\nIt is licensed under the BSD 3-Clause license. See LICENSE.txt for more\r\ninformation.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}